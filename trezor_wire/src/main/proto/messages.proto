syntax = "proto2";

// Sugar for easier handling in Java
option java_package = "io.trezor.deviceprotocol";
option java_outer_classname = "TrezorMessage";

import "types.proto";

enum MessageType {
    MessageType_Initialize = 0 [(wire_in) = true];
    MessageType_Ping = 1 [(wire_in) = true];
    MessageType_Success = 2 [(wire_out) = true];
    MessageType_Failure = 3 [(wire_out) = true];
    MessageType_ChangePin = 4 [(wire_in) = true];
    MessageType_Features = 17 [(wire_out) = true];
    MessageType_PinMatrixRequest = 18 [(wire_out) = true];
    MessageType_PinMatrixAck = 19 [(wire_in) = true];
    MessageType_Cancel = 20 [(wire_in) = true];
    MessageType_TxRequest = 21 [(wire_out) = true];
    MessageType_TxAck = 22 [(wire_in) = true];
    MessageType_ButtonRequest = 26 [(wire_out) = true];
    MessageType_ButtonAck = 27 [(wire_in) = true];
    MessageType_Address = 30 [(wire_out) = true];
    MessageType_EntropyRequest = 35 [(wire_out) = true];
    MessageType_EntropyAck = 36 [(wire_in) = true];
    MessageType_SignMessage = 38 [(wire_in) = true];
    MessageType_VerifyMessage = 39 [(wire_in) = true];
    MessageType_MessageSignature = 40 [(wire_out) = true];
    MessageType_PassphraseRequest = 41 [(wire_out) = true];
    MessageType_PassphraseAck = 42 [(wire_in) = true];
    // Formerly EstimateTxSize = 43
    // Formerly TxSize = 44
    MessageType_RecoveryDevice = 45 [(wire_in) = true];
    MessageType_WordRequest = 46 [(wire_out) = true];
    MessageType_WordAck = 47 [(wire_in) = true];
    MessageType_CipheredKeyValue = 48 [(wire_out) = true];
    MessageType_EncryptMessage = 49 [(wire_in) = true];
    MessageType_SignedIdentity = 54 [(wire_out) = true];
    MessageType_GetFeatures = 55 [(wire_in) = true];
    MessageType_EthereumGetAddress = 56 [(wire_in) = true];
    MessageType_EthereumAddress = 57 [(wire_out) = true];
    MessageType_EthereumSignTx = 58 [(wire_in) = true];
    MessageType_EthereumTxRequest = 59 [(wire_out) = true];
    MessageType_EthereumTxAck = 60 [(wire_in) = true];
    MessageType_EthereumSignMessage = 64 [(wire_in) = true];
    MessageType_EthereumVerifyMessage = 65 [(wire_in) = true];
    MessageType_EthereumMessageSignature = 66 [(wire_out) = true];

}

////////////////////
// Basic messages //
////////////////////

/**
 * Request: Reset device to default state and ask for device details
 * @next Features
 */
message Initialize {
}

/**
 * Request: Ask for device details (no device reset)
 * @next Features
 */
message GetFeatures {
}

/**
 * Response: Reports various information about the device
 * @prev Initialize
 * @prev GetFeatures
 */
message Features {
    optional string vendor = 1; // name of the manufacturer, e.g. "bitcointrezor.com"
    optional uint32 major_version = 2; // major version of the device, e.g. 1
    optional uint32 minor_version = 3; // minor version of the device, e.g. 0
    optional uint32 patch_version = 4; // patch version of the device, e.g. 0
    optional bool bootloader_mode = 5; // is device in bootloader mode?
    optional string device_id = 6; // device's unique identifier
    optional bool pin_protection = 7; // is device protected by PIN?
    optional bool passphrase_protection = 8; // is node/mnemonic encrypted using passphrase?
    optional string language = 9; // device language
    optional string label = 10; // device description label
    repeated CoinType coins = 11; // supported coins (Deprecated. Use GetCoinTable instead)
    optional bool initialized = 12; // does device contain seed?
    optional bytes revision = 13; // SCM revision of firmware
    optional bytes bootloader_hash = 14; // double sha256 hash of the bootloader
    optional bool imported = 15; // was storage imported from an external source?
    optional bool pin_cached = 16; // is PIN already cached in session?
    optional bool passphrase_cached = 17; // is passphrase already cached in session?
    repeated PolicyType policies = 18; // policies
    optional string model = 21; // device hardware model
    optional string firmware_variant = 22; // Firmware variant
    optional bytes firmware_hash = 23; // double sha256 hash of the firmware
    optional bool no_backup = 24; // Device was initialized without displaying recovery sentence.
}


/**
 * Request: clear session (removes cached PIN, passphrase, etc).
 * @next Success
 */
message ClearSession {
}

/**
 * Request: Test if the device is alive, device sends back the message in Success response
 * @next Success
 */
message Ping {
    optional string message = 1; // message to send back in Success message
    optional bool button_protection = 2; // ask for button press
    optional bool pin_protection = 3; // ask for PIN if set in device
    optional bool passphrase_protection = 4; // ask for passphrase if set in device
}

/**
 * Response: Success of the previous request
 */
message Success {
    optional string message = 1; // human readable description of action or request-specific payload
}

/**
 * Response: Failure of the previous request
 */
message Failure {
    optional FailureType code = 1; // computer-readable definition of the error state
    optional string message = 2; // human-readable message of the error state
}

/**
 * Response: Device is waiting for HW button press.
 * @next ButtonAck
 * @next Cancel
 */
message ButtonRequest {
    optional ButtonRequestType code = 1;
    optional string data = 2;
}

/**
 * Request: Computer agrees to wait for HW button press
 * @prev ButtonRequest
 */
message ButtonAck {
}

/**
 * Response: Device is asking computer to show PIN matrix and awaits PIN encoded using this matrix scheme
 * @next PinMatrixAck
 * @next Cancel
 */
message PinMatrixRequest {
    optional PinMatrixRequestType type = 1;
}

/**
 * Request: Computer responds with encoded PIN
 * @prev PinMatrixRequest
 */
message PinMatrixAck {
    required string pin = 1; // matrix encoded PIN entered by user
}

/**
 * Request: Abort last operation that required user interaction
 * @prev ButtonRequest
 * @prev PinMatrixRequest
 * @prev PassphraseRequest
 */
message Cancel {
}

/**
 * Response: Device awaits encryption passphrase
 * @next PassphraseAck
 * @next Cancel
 */
message PassphraseRequest {
    optional bool _on_device = 1; //  [deprecated = true]; // <2.3.0
}

/**
 * Request: Send passphrase back
 * @prev PassphraseRequest
 */
message PassphraseAck {
    required string passphrase = 1;
    optional bytes _state = 2; // [deprecated = true]; // <2.3.0
    optional bool on_device = 3; // user wants to enter passphrase on the device
}


/**
 * Request: Ask device for Ethereum address corresponding to address_n path
 * @next PassphraseRequest
 * @next EthereumAddress
 * @next Failure
 */
message EthereumGetAddress {
    repeated uint32 address_n = 1; // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // optionally show on display before sending the result
}


/**
 * Response: Contains an Ethereum address derived from device private seed
 * @prev EthereumGetAddress
 */
message EthereumAddress {
    optional bytes address = 1; // deprecated - Coin address as an Ethereum 160 bit hash
    optional string address_str = 2;
}

///////////////////////////
// Encryption/decryption //
///////////////////////////


//////////////////////////////////
// Transaction signing messages //
//////////////////////////////////

/**
 * Request: Ask device to sign transaction
 * gas_price, gas_limit and chain_id must be provided and non-zero.
 * All other fields are optional and default to value `0` if missing.
 * Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
 * @start
 * @next EthereumTxRequest
 * @next Failure
 */
message EthereumSignTx {
    repeated uint32 address_n = 1;                       // BIP-32 path to derive the key from master node
    optional bytes nonce = 2 [default=''];               // <=256 bit unsigned big endian
    required bytes gas_price = 3;                        // <=256 bit unsigned big endian (in wei)
    required bytes gas_limit = 4;                        // <=256 bit unsigned big endian
    optional string to = 11 [default=''];                // recipient address
    optional bytes value = 6 [default=''];               // <=256 bit unsigned big endian (in wei)
    optional bytes data_initial_chunk = 7 [default=''];  // The initial data chunk (<= 1024 bytes)
    optional uint32 data_length = 8 [default=0];         // Length of transaction payload
    required uint64 chain_id = 9;                        // Chain Id for EIP 155
    optional uint32 tx_type = 10;                        // Used for Wanchain
}

/**
 * Request: Ask device to sign transaction
 * All fields are optional from the protocol's point of view. Each field defaults to value `0` if missing.
 * Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
 * @next PassphraseRequest
 * @next PinMatrixRequest
 * @next EthereumTxRequest
 * @next Failure
 */
message EthereumSignTxKeepKey {
    repeated uint32 address_n = 1; // BIP-32 path to derive the key from master node
    optional bytes nonce = 2; // <=256 bit unsigned big endian
    optional bytes gas_price = 3; // <=256 bit unsigned big endian (in wei)
    optional bytes gas_limit = 4; // <=256 bit unsigned big endian
    optional bytes to = 5; // 160 bit address hash
    optional bytes value = 6; // <=256 bit unsigned big endian (in wei)
    optional bytes data_initial_chunk = 7; // The initial data chunk (<= 1024 bytes)
    optional uint32 data_length = 8; // Length of transaction payload
    repeated uint32 to_address_n = 9; // BIP-32 path to derive key for fund transfer
    optional OutputAddressType address_type = 10; // output address type
    optional uint32 chain_id = 12; // Chain Id for EIP 155
    optional bytes token_value = 100; // How many tokens to send
    optional bytes token_to = 101; // 160 bit address hash to send tokens to
    optional string token_shortcut = 102; // 3 or 4 character token identifier
    optional uint32 tx_type = 103; // (only for Wanchain)
}

/**
 * Response: Device asks for more data from transaction payload, or returns the signature.
 * If data_length is set, device awaits that many more bytes of payload.
 * Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
 * @prev EthereumSignTx
 * @next EthereumTxAck
 */
message EthereumTxRequest {
    optional uint32 data_length = 1; // Number of bytes being requested (<= 1024)
    optional uint32 signature_v = 2; // Computed signature (recovery parameter, limited to 27 or 28)
    optional bytes signature_r = 3; // Computed signature R component (256 bit)
    optional bytes signature_s = 4; // Computed signature S component (256 bit)
    optional bytes hash = 5; // Computed hash using SHA3 (keccak_ctx)
    optional bytes signature_der = 6; // Computed signature in DER format
}

/**
 * Request: Transaction payload data.
 * @prev EthereumTxRequest
 * @next EthereumTxRequest
 */
message EthereumTxAck {
    optional bytes data_chunk = 1; // Bytes from transaction payload (<= 1024 bytes)
}

////////////////////////////////////////
// Ethereum: Message signing messages //
////////////////////////////////////////

/**
 * Request: Ask device to sign message
 * @next EthereumMessageSignature
 * @next Failure
 */
message EthereumSignMessage {
    repeated uint32 address_n = 1; // BIP-32 path to derive the key from master node
    required bytes message = 2; // message to be signed
}

/**
 * Request: Ask device to verify message
 * @next Success
 * @next Failure
 */
message EthereumVerifyMessage {
    optional bytes address = 1; // address to verify
    optional bytes signature = 2; // signature to verify
    optional bytes message = 3; // message to verify
}

/**
 * Response: Signed message
 * @prev EthereumSignMessage
 */
message EthereumMessageSignature {
    optional bytes address = 1; // address used to sign the message
    optional bytes signature = 2; // signature of the message
}

